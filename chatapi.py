# -*- coding: utf-8 -*-
import os
import re
from openai import OpenAI
from dotenv import load_dotenv
load_dotenv()

# ‚úÖ ‡∏î‡∏∂‡∏á GROQ_API_KEY ‡∏à‡∏≤‡∏Å Environment Variable
client = OpenAI(
    api_key=os.getenv("GROQ_API_KEY"),
    base_url="https://api.groq.com/openai/v1"
)

conversation_history = []
current_order = []
current_lang = "th"

def init_chat(lang_code="th"):
    global conversation_history, current_order, current_lang
    current_lang = lang_code

    if lang_code == "th":
        system_prompt = """
        ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        - ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô
        1. ‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î x2
        2. ‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á x1
        - ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠ ‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏Ç 1. 2. 3. ... ‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏ô‡∏π' ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠ ‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏Ç‡∏Å‡∏≥‡∏Å‡∏±‡∏ö
        - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏∞‡∏Å‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏õ‡∏•‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏≤‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å
        - ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'reset' = ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        - ‡∏ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        """
    else:
        system_prompt = """
        You are a food ordering assistant for a restaurant in Thailand.
        - Always reply in Thai, except for the food item names (keep them in the original language the user typed).
        - When a user orders food, keep each menu item as a single entry in the order list, and always show a numbered list (1., 2., 3., ...) with the quantity for each item, for example:
        1. cheeseburger x3
        2. french fries x2
        - Even if there is only one item, always number it as '1.'
        - When showing the summary, always use this numbered list format.
        - When users mention English number words (one, two, three, four, five, etc.) or similar-sounding words (to, too, for, fore, ate, etc.), always interpret them as numbers (1, 2, 3, 4, 8, etc.), unless the context clearly says otherwise.
        - If the context is unclear, always ask the user to confirm the intended quantity.
        - If the user types 'summary', show the full list of orders in the above format.
        - If the user types 'reset', clear all previous orders and start a new conversation.
        - If a sentence is unclear or contains mistakes, do your best to interpret and correct it.
        """


    conversation_history.clear()
    current_order.clear()
    conversation_history.append({'role': 'system', 'content': system_prompt})

def summarize_order(menu_items):
    if not menu_items:
        return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡πà‡∏á" if current_lang == "th" else "No items ordered yet."
    return ("üìù ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á:\n" if current_lang == "th" else "üìù Order Summary:\n") + "\n".join(
        f"{i+1}. {item['name']} - {item.get('note', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏' if current_lang == 'th' else 'No note')}"
        for i, item in enumerate(menu_items)
    )

def parse_menu_items(text):
    items = []
    lines = text.strip().split('\n')
    for line in lines:
        match = re.match(r'-\s*(.+?)\s*(\d+)\s*‡∏à‡∏≤‡∏ô(?:\s*\((.+?)\))?', line)
        if match:
            name = match.group(1).strip()
            quantity = int(match.group(2))
            note = match.group(3) if match.group(3) else ''
            for _ in range(quantity):
                items.append({'name': name, 'note': note})
    return items

def chat_with_text(user_input, lang_code="th"):
    global conversation_history, current_order, current_lang

    if not conversation_history or current_lang != lang_code:
        init_chat(lang_code)

    if user_input.lower().strip() == "reset":
        init_chat(lang_code)
        return "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" if lang_code == "th" else "Conversation reset."

    if user_input.lower().strip() in ["‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏ô‡∏π", "summary"]:
        return summarize_order(current_order)

    if any(word in user_input.lower() for word in ["‡∏™‡∏±‡πà‡∏á", "order"]):
        parts = user_input.split()
        if len(parts) >= 2:
            item_name = parts[1]
            note = " ".join(parts[2:]) if len(parts) > 2 else ""
            current_order.append({'name': item_name, 'note': note})
            return summarize_order(current_order)

    if "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" in user_input:
        items = parse_menu_items(user_input)
        if items:
            current_order.extend(items)
            return summarize_order(current_order)

    conversation_history.append({'role': 'user', 'content': user_input})

    try:
        response = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=conversation_history,
            temperature=0.7
        )
        if not response.choices:
            return "‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö" if lang_code == "th" else "Model did not respond."

        content = getattr(response.choices[0].message, "content", "")
        reply = (content or "").strip()
        conversation_history.append({'role': 'assistant', 'content': reply})
        return reply
    except Exception as e:
        conversation_history.pop()
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}" if lang_code == "th" else f"Error occurred: {str(e)}"
